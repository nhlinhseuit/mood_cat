import 'package:flutter/material.dart';

enum Mood {
  angry, // T·ª©c gi·∫≠n
  sad, // Bu·ªìn
  depressed, // Tr·∫ßm t√≠nh
  worried, // Lo l·∫Øng
  happy, // H·∫°nh ph√∫c
  excited, // L√∫ng t√∫ng
  confused, // B·ªëi r·ªëi
  bored, // Ch√°n
  annoyed, // B·ª±c b·ªôi
  tired, // Th∆∞ gi√£n
  none,
}

extension MoodExtension on Mood {
  String get emoji {
    switch (this) {
      case Mood.angry:
        return 'üò°';
      case Mood.sad:
        return 'üò¢';
      case Mood.depressed:
        return 'üòû';
      case Mood.worried:
        return 'üòü';
      case Mood.happy:
        return 'üòä';
      case Mood.excited:
        return 'üòï';
      case Mood.confused:
        return 'ü§î';
      case Mood.bored:
        return 'üòê';
      case Mood.annoyed:
        return 'üò†';
      case Mood.tired:
        return 'üòå';
      case Mood.none:
        return '';
    }
  }

  Color get color {
    switch (this) {
      case Mood.angry:
        return Colors.red;
      case Mood.sad:
        return Colors.blue;
      case Mood.depressed:
        return Colors.green;
      case Mood.worried:
        return Colors.purple;
      case Mood.happy:
        return Colors.yellow;
      case Mood.excited:
        return Colors.teal;
      case Mood.confused:
        return Colors.cyan;
      case Mood.bored:
        return Colors.grey;
      case Mood.annoyed:
        return Colors.orange;
      case Mood.tired:
        return Colors.lime;
      case Mood.none:
        return Colors.black;
    }
  }

  String get description {
    switch (this) {
      case Mood.angry:
        return 'T·ª©c gi·∫≠n';
      case Mood.sad:
        return 'Bu·ªìn';
      case Mood.depressed:
        return 'Tr·∫ßm t√≠nh';
      case Mood.worried:
        return 'Lo l·∫Øng';
      case Mood.happy:
        return 'H·∫°nh ph√∫c';
      case Mood.excited:
        return 'L√∫ng t√∫ng';
      case Mood.confused:
        return 'B·ªëi r·ªëi';
      case Mood.bored:
        return 'Ch√°n';
      case Mood.annoyed:
        return 'B·ª±c b·ªôi';
      case Mood.tired:
        return 'Th∆∞ gi√£n';
      case Mood.none:
        return '';
    }
  }
}

Mood stringToMood(String moodString) {
  try {
    return Mood.values.firstWhere(
      (mood) => mood.toString().split('.').last == moodString,
      orElse: () => Mood.happy,
    );
  } catch (e) {
    return Mood.happy; // Tr·∫£ v·ªÅ null n·∫øu kh√¥ng t√¨m th·∫•y
  }
}
